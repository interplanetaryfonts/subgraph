type _Schema_
    @fulltext(
        name: "UserSearch"
        language: en
        algorithm: rank
        include: [
            {
                entity: "UserMetadata"
                fields: [
                    { name: "id" }
                    { name: "name" }
                    { name: "website" }
                    { name: "bio" }
                    # { name: "links" }
                ]
            }
        ]
    )

"Users structure"
type User @entity {
    id: ID!
    walletAddress: Bytes!
    "Profile data in IPFS"
    profileInfoCID: String!
    profileInfo: UserMetadata
    "Dates as BigInts, usefull for sorting"
    createdAt: BigInt
    updatedAt: BigInt
    "Lens Handle can be null for collectors"
    lensHandle: String
}

"User metadata structure"
type UserMetadata @entity {
    id: ID!
    email: String
    name: String
    website: String
    bio: String
    links: [Link!] @derivedFrom(field: "userMetaData")
}

"If there's a link it will need this structure"
type Link @entity {
    id: ID!
    name: String!
    url: String!
    userMetaData: UserMetadata!
}

"Font Project"
type FontProject @entity {
    id: ID!
    creatorAddress: Bytes!
    "Price per character"
    perCharacterMintPrice: BigInt
    "Font metadata in IPFS"
    metaDataCID: String!
    name: String
    description: String
    "Superfluid Immediate Distribution Agreement data"
    royaltyIDAIndex: BigInt
    idaDistributionToken: Bytes
    "Font files stored in IPFS"
    fontFilesCID: String
    "Number of mints defined by creator"
    mintLimit: BigInt
    "Dates as BigInts, usefull for sorting"
    launchDateTime: BigInt
    createdAt: BigInt
    updatedAt: BigInt
}

# "Font Stream, funders, and collaborators"
# type FontStream @entity {
#     id: ID!
#     name: String!
#     description: String
#     aduration: BigInt!
#     fundingGoalAmount: BigInt!
#     "Dates as BigInts, usefull for sorting"
#     startDateTime: BigInt!
#     createdAt: BigInt!
#     updatedAt: BigInt
#     proposer: User!
#     isApproved: Boolean!
#     project: FontProject!
#     "Superfluid SuperToken address"
#     streamingSuperToken: Bytes!
#     fundings: [FontStreamFund!]
#     collaborations: [FontStreamCollaboration!]
# }

# type FontStreamFund @entity {
#     id: ID!
#     funder: User!
#     amount: BigInt!
#     rate: BigInt!
#     stream: FontStream!
#     createdAt: BigInt!
#     updatedAt: BigInt
# }

# type FontStreamCollaboration @entity {
#     id: ID!
#     proposer: User!
#     "Path to ZIP file with source font"
#     deliverablesCID: String!
#     funderApprovedVoters: [User!]
#     funderDisapprovedVoters: [User!]
#     stream: FontStream!
#     createdAt: BigInt!
#     updatedAt: BigInt
# }
